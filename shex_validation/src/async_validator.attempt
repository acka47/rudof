use async_recursion::async_recursion;
use shapemap::{ShapeMap, ShapeMapState};
use shex_ast::compiled_schema::{ShapeExpr, TripleExpr};
use shex_ast::{CompiledSchema, SchemaJson, ShapeLabel};
use srdf::{IriS, SRDF};
use std::fmt::Debug;
use std::hash::Hash;
use std::str::FromStr;
use std::sync::{Arc, Mutex};
use thiserror::Error;
use tokio::sync::RwLock;
use tokio::task;

struct Validator<SL> {
    schema: CompiledSchema<SL>,
}

// type Typing = Arc<RwLock<ShapeMap>>;

impl<SL> Validator<SL>
where
    SL: Eq + Hash + Debug + FromStr + Sync + Send,
{
    fn new(schema: CompiledSchema<SL>) -> Validator<SL> {
        Validator { schema: schema }
    }

    fn from_json_str(json_str: String) -> Result<Validator<SL>, ValidationError<'static, SL>> {
        match serde_json::from_str::<SchemaJson>(json_str.as_str()) {
            Ok(schema_json) => {
                let schema = CompiledSchema::from_schema_json(schema_json)?;
                Ok(Validator::new(schema))
            }
            Err(e) => Err(ValidationError::FromJsonStr {
                str: json_str,
                err: e.to_string(),
            }),
        }
    }

    #[async_recursion]
    async fn check_node_shape_label<'a, SM, G>(
        &'a self,
        node: &'a SM::NodeIdx,
        shape_label: &'a SL,
        shape_map: &'a Arc<RwLock<SM>>,
        graph: &G,
    ) -> Result<(), ValidationError<'a, SL>>
    where
        G: SRDF + Sync + Send,
        SM: ShapeMap<NodeIdx = G::Term, ShapeIdx = SL> + Sync + Send,
    {
        let sm = shape_map.blocking_read();
        match *sm.state(&node, shape_label) {
            ShapeMapState::Conforms => Ok(()),
            ShapeMapState::Fails => Ok(()),
            ShapeMapState::Inconsistent => Ok(()),
            ShapeMapState::Unknown => match self.schema.find_label(shape_label) {
                None => Err(ValidationError::LabelNotFoundError {
                    shape_label,
                    existing_labels: self.schema.existing_labels(),
                }),
                Some(shape_expr) => {
                    self.check_node_shape_expr(node, shape_expr, shape_map, graph)
                        .await
                }
            },
            ShapeMapState::Pending => match self.schema.find_label(shape_label) {
                None => Err(ValidationError::LabelNotFoundError {
                    shape_label,
                    existing_labels: self.schema.existing_labels(),
                }),
                Some(shape_expr) => {
                    self.check_node_shape_expr(node, shape_expr, shape_map, graph)
                        .await
                }
            },
        }
    }

    #[async_recursion]
    async fn check_node_shape_expr<'a, SM, G>(
        &'a self,
        node: &SM::NodeIdx,
        shape_expr: &ShapeExpr,
        shape_map: &'a Arc<RwLock<SM>>,
        graph: &G,
    ) -> Result<(), ValidationError<'a, SL>>
    where
        G: SRDF + Sync + Send,
        SM: ShapeMap<ShapeIdx = SL, NodeIdx = G::Term> + Sync + Send,
    {
        match shape_expr {
            ShapeExpr::Shape {
                expression: Some(triple_expr),
                ..
            } => {
                self.check_node_triple_expr(node, triple_expr, shape_map, graph)
                    .await
            }
            _ => todo!(),
        }
    }

    #[async_recursion]
    async fn check_node_triple_expr<'a, SM, G>(
        &'a self,
        node: &SM::NodeIdx,
        triple_expr: &TripleExpr,
        shape_map: &'a Arc<RwLock<SM>>,
        graph: &G,
    ) -> Result<(), ValidationError<'a, SL>>
    where
        G: SRDF + Sync + Send,
        SM: ShapeMap<NodeIdx = G::Term, ShapeIdx = SL> + Sync + Sync + Send,
    {
        match triple_expr {
            TripleExpr::TripleConstraint {
                id: _,
                inverse,
                predicate,
                value_expr,
                min,
                max,
                sem_acts,
                annotations,
            } => {
                if let Some(subject) = graph.term_as_subject(node) {
                    println!(
                        "Before obtaining objects for subject {} and predicate {}",
                        subject, predicate
                    );
                    let pred = cnv_iri(predicate, graph);
                    let os = graph
                        .get_objects_for_subject_predicate(
                            &subject, // &graph.iri_from_str(predicate.to_string()),
                            &pred,
                        )
                        .await
                        .map_err(|e| ValidationError::SRDFError {
                            error: format!(
                                "Obtaining objects for {subject} and predicate {predicate}: {e}",
                            ),
                        })?;
                    let ps: srdf::Bag<<G as SRDF>::IRI> = graph
                        .get_predicates_subject(&subject)
                        .await
                        .map_err(|e| ValidationError::SRDFError {
                            error: format!("Obtaining predicates for {subject}: {e}"),
                        })?;
                    println!("Result of predicates: {}", ps);
                    println!("Result of objects: {}", os.len());
                    if let Some(value_expr) = value_expr {
                        for object in &os {
                            let result = self
                                .check_node_shape_expr(object, value_expr, shape_map, graph)
                                .await?;
                        }
                    }
                    match check_cardinality(os.len(), min, max) {
                        Ok(_) => Ok(()),
                        Err(ce) => {
                            println!(
                                "Cardinality failed: {} min {:?} max {:?}",
                                os.len(),
                                min,
                                max
                            );
                            todo!()
                        }
                    }
                } else {
                    todo!()
                }
            }
            _ => todo!(),
        }
    }
}

fn cnv_iri<'a, G>(iris: &'a IriS, graph: &'a G) -> G::IRI
where
    G: SRDF,
{
    graph.iri_from_str(iris.as_str().to_string().clone())
}


fn check_cardinality(
    c: usize,
    min: &Option<i32>,
    max: &Option<i32>,
) -> Result<(), CardinalityError> {
    let min = min.unwrap_or(1);
    if c < min.try_into().unwrap() {
        return Err(CardinalityError::CardinalityLessThanMin { c: c, min: min });
    }
    let max = max.unwrap_or(1);
    if max == -1 {
        // max = -1 means unbounded
        return Ok(());
    }
    if c > max.try_into().unwrap() {
        return Err(CardinalityError::CardinalityGreaterThanMax { c: c, max: max });
    }
    Ok(())
}

#[cfg(test)]
mod tests {
    use std::sync::Mutex;

    use crate::*;
    use iri_s::*;
    use oxrdf::NamedNode;
    use oxrdf::*;
    use shapemap_oxgraph::shapelabel_oxgraph::ShapeLabelOxGraph;
    use shapemap_oxgraph::ShapeMapOxGraph;
    use srdf_oxgraph::SRDFGraph;

    #[test]
    fn check_cnv_iri() -> Result<(), IriSError> {
        let iri: IriS = IriS::new("http://a.example/p1").unwrap();
        let graph = SRDFGraph::new();
        let expected = NamedNode::new("http://a.example/p1".to_string()).unwrap();
        assert_eq!(cnv_iri(&iri, &graph), expected);
        Ok(())
    }

    #[test]
    fn test_cardinality() -> Result<(), CardinalityError> {
        let ce = check_cardinality(1, &None, &None)?;
        assert_eq!(ce, ());
        Ok(())
    }

    #[tokio::test]
    async fn test_simple() {
        let str = r#"{
            "@context": "http://www.w3.org/ns/shex.jsonld",
            "type": "Schema",
            "shapes": [
                {
                    "type": "ShapeDecl",
                    "id": "http://a.example/S1",
                    "shapeExpr": {
                        "type": "Shape",
                        "expression": {
                            "type": "TripleConstraint",
                            "predicate": "http://a.example/p1"
                        }
                    }
                }
            ]
        }"#;
        let validator: Validator<ShapeLabelOxGraph> =
            Validator::from_json_str(str.to_string()).unwrap();

        let rdf_str = r#"
        prefix : <http://a.example/>

        :x :p1 :y .
        "#;
        let graph = SRDFGraph::from_str(rdf_str.to_string()).unwrap();
        // Debug...
        let x = NamedNode::new_unchecked("http://a.example/x".to_string());
        let subject = Subject::NamedNode(x);
        let pred = NamedNode::new_unchecked("http://a.example/p1".to_string());
        let os = graph
            .get_objects_for_subject_predicate(&subject, &pred)
            .await
            .unwrap();
        println!("Result of objects for subject predicate: {:?}", os);
        // end debug
        let shape_label: ShapeLabelOxGraph =
            ShapeLabelOxGraph::Iri(NamedNode::new_unchecked("http://a.example/S1"));
        let shape_map = Arc::new(RwLock::new(ShapeMapOxGraph::new()));
        let node = Term::NamedNode(NamedNode::new_unchecked("http://a.example/x".to_string()));
        let result = validator
            .check_node_shape_label(&node, &shape_label, &shape_map, &graph)
            .await
            .unwrap();
        let conforms: ShapeMapState = ShapeMapState::Conforms;
        let v = shape_map.blocking_read();
        let r = v.state(&node, &shape_label);
        // let r: &ShapeMapState<'_, oxrdf::Term, ShapeLabelOxGraph> =
        //    shape_map.state(&node, &shape_label);
        assert_eq!(r, &conforms);
    }
}
