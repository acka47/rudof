//! A parser for ShExC based on: http://shex.io/shex-next/#shexc

// [1] shexDoc ::= directive* ((notStartAction | startActions) statement*)?
// TODO: ((notStartAction | startActions) statement*)?
shexDoc = {
  SOI 
  ~ directive* 
  ~ EOI
}

// 2] directive	::= baseDecl | prefixDecl | importDecl
// TODO: | importDecl
directive = {
  baseDecl | prefixDecl
}

// [3] baseDecl	::= "BASE" IRIREF
baseDecl = {
  ^"base" ~ IRIREF
}

// [4] prefixDecl ::= "PREFIX" PNAME_NS IRIREF
prefixDecl = {
 ^"prefix" ~ PNAME_NS ~ IRIREF
}

// [18t] <IRIREF> ::= "<" ([^#0000- <>\"{}|^`\\] | UCHAR)* ">"
IRIREF = ${
    "<" ~ IRIREF_INNER ~ ">"
}

IRIREF_INNER = @{
    IRIREF_CHAR*
}

IRIREF_CHAR = {
    /* #x00=NULL #01-#x1F=control codes #x20=space */
    !(">" | '\u{0000}'..'\u{0020}' | "\"" | "{" | "}" | "|" | "^" | "`" | "\\") ~  ANY
    | UCHAR
}

// [140s] <PNAME_NS> ::= PN_PREFIX? ":"
PNAME_NS = {
  PN_PREFIX? ~ ":"
}

// [26t] <UCHAR> ::= "\\u" HEX HEX HEX HEX
//                 | "\\U" HEX HEX HEX HEX HEX HEX HEX HEX
UCHAR = @{
	"\\u" ~ ASCII_HEX_DIGIT{4} 
  | "\\U" ~ ASCII_HEX_DIGIT{8} 
}

// [164s] <PN_CHARS_BASE>	   ::=   	   [A-Z] | [a-z]
// | [#00C0-#00D6] | [#00D8-#00F6] | [#00F8-#02FF]
// | [#0370-#037D] | [#037F-#1FFF]
// | [#200C-#200D] | [#2070-#218F] | [#2C00-#2FEF]
// | [#3001-#D7FF] | [#F900-#FDCF] | [#FDF0-#FFFD]
// | [#10000-#EFFFF]
PN_CHARS_BASE = {
	ASCII_ALPHA
	| '\u{00C0}'..'\u{00D6}'
	| '\u{00D8}'..'\u{00F6}'
	| '\u{00F8}'..'\u{02FF}'
	| '\u{0370}'..'\u{037D}'
	| '\u{037F}'..'\u{1FFF}'
	| '\u{200C}'..'\u{200D}'
	| '\u{2070}'..'\u{218F}'
	| '\u{2C00}'..'\u{2FEF}'
	| '\u{3001}'..'\u{D7FF}'
	| '\u{F900}'..'\u{FDCF}'
	| '\u{FDF0}'..'\u{FFFD}'
	| '\u{10000}'..'\u{EFFFF}'
}

// [165s] <PN_CHARS_U>	::= PN_CHARS_BASE | "_"
PN_CHARS_U = {
	PN_CHARS_BASE
	| "_"
}


// [167s] <PN_CHARS> ::= PN_CHARS_U | "-" | [0-9]
//                     | [#00B7] | [#0300-#036F] | [#203F-#2040]
PN_CHARS = {
	PN_CHARS_U
	| "-"
	| ASCII_DIGIT
	| '\u{00B7}'..'\u{00B7}'
	| '\u{0300}'..'\u{036F}'
	| '\u{203F}'..'\u{2040}'
}


// [168s] <PN_PREFIX> ::= PN_CHARS_BASE ( (PN_CHARS | ".")* PN_CHARS )?
// TODO: Check that the conversion is equivalent
PN_PREFIX = @{
	PN_CHARS_BASE ~ PN_CHARS* ~ PN_PREFIX_TAIL*
}	

PN_PREFIX_TAIL = {
	PN_CHARS
	| &("." ~ PN_CHARS) ~ "."
}

// Whitespace and comments
WHITESPACE = _{
	" " | "\t" | newline
}
COMMENT = _{ 
  "/*" ~ (!"*/" ~ ANY)* ~ "*/" |
  "#" ~ (!newline ~ ANY)*
}
newline    = _{ "\n" | "\r\n" }
